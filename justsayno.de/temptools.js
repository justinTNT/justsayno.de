// Generated by CoffeeScript 1.6.2
(function() {
  var buildScripts, configureTemplates, dirt, eachMatchedFile, eachPlugDir, fs, genericDynamicLoadAppFiles, jade, justsay, loadDefaults, populatipi, replaceStaticApp, ugly;

  fs = require("fs");

  justsay = require("./justsay");

  dirt = require("./dirtools");

  ugly = require("uglify-js");

  jade = require("jade");

  eachMatchedFile = function(dirname, files, match, cb, fcb) {
    var fn;

    fn = files.shift();
    if (fn) {
      if (match(fn)) {
        return fs.readFile("" + dirname + "/" + fn, function(err, data) {
          if (err) {
            throw err;
          }
          cb(String(data), fn);
          return eachMatchedFile(dirname, files, match, cb, fcb);
        });
      } else {
        return eachMatchedFile(dirname, files, match, cb, fcb);
      }
    } else {
      if (fcb) {
        return fcb();
      }
    }
  };

  eachPlugDir = function(plugins, match, op, fcb) {
    var dirname, plugin;

    plugin = plugins.shift();
    if (typeof plugin !== "undefined") {
      dirname = __dirname + ("/../common/" + plugin + "/browser");
      return fs.readdir(dirname, function(err, files) {
        if (err) {
          throw err;
        }
        return eachMatchedFile(dirname, files, match, op, function() {
          return eachPlugDir(plugins, match, op, fcb);
        });
      });
    } else {
      if (fcb) {
        return fcb();
      }
    }
  };

  genericDynamicLoadAppFiles = function(e, suffix, appendattr, fcb) {
    var re;

    re = new RegExp(".*\\." + suffix + "$");
    return fs.readFile("" + e.dir + "/browser/" + e.appname + "." + suffix, function(err, data) {
      if (err) {
        throw err;
      }
      if (suffix === "css") {
        data = replaceStaticApp(e, data);
      }
      e[appendattr] += String(data);
      return fs.readdir("" + e.dir + "/browser/" + suffix + "/", function(err, files) {
        if (err) {
          throw err;
        }
        return eachMatchedFile("" + e.dir + "/browser/" + suffix + "/", files, function(fn) {
          return re.test(fn);
        }, function(txt) {
          return e[appendattr] = txt + e[appendattr];
        }, function() {
          if (e.plugins) {
            return eachPlugDir(e.plugins.slice(0), (function(fn) {
              return re.test(fn);
            }), (function(txt) {
              return e[appendattr] = txt + e[appendattr];
            }), fcb);
          } else {
            if (fcb) {
              return fcb();
            }
          }
        });
      });
    });
  };

  loadDefaults = function(e, str, dir, cb) {
    return fs.readdir(dir, function(err, files) {
      if (err) {
        throw err;
      }
      e[str] = "";
      return dirt.eachfile(dir, files, function(fn, txt) {
        return e[str] += replaceStaticApp(e, txt);
      }, cb);
    });
  };

  buildScripts = function(e, txt, cb) {
    var cssdir, cssstr, libdir, libstr;

    libdir = "" + __dirname + "/browserlibs";
    libstr = "scriptplatestring";
    cssdir = "" + __dirname + "/browserstyles";
    cssstr = "cssstring";
    return loadDefaults(e, libstr, libdir, function() {
      return dirt.read_dir("" + e.dir + "/browser/libs", (function(fn, str) {
        return e[libstr] += str;
      }), function() {
        return dirt.eachfile(__dirname, ["justsay.js", "browserbootstrap.js"], (function(fn, str) {
          return e[libstr] += str;
        }), function() {
          e[libstr] += "var justsayno = { de: {localurl:'" + e.localurl + "', staticurl:'" + e.staticurl + "',\n skeleta : JSON.parse('" + txt + "')}\n};\n";
          return genericDynamicLoadAppFiles(e, "js", libstr, function() {
            var ast;

            if (process.env.NODE_ENV) {
              ast = ugly.parser.parse(e[libstr]);
              ast = ugly.uglify.ast_mangle(ast);
              ast = ugly.uglify.ast_squeeze(ast);
              e[libstr] = ugly.uglify.gen_code(ast);
            }
            return loadDefaults(e, cssstr, cssdir, function() {
              return genericDynamicLoadAppFiles(e, "css", cssstr, cb);
            });
          });
        });
      });
    });
  };

  replaceStaticApp = function(e, txt) {
    return String(txt).replace(/\{\{APP\}\}/g, e.appname).replace(/\{\{STATIC\}\}/g, "http://" + e.staticurl + "/").replace(/\{\{LOCAL\}\}/g, "http://" + e.localurl + "/");
  };

  populatipi = function(e, dirname, whichplate, done) {
    return fs.readdir(dirname, function(err, files) {
      if (err) {
        throw err;
      }
      return eachMatchedFile(dirname, files, function(fn) {
        return /.*\.html?$/.test(fn) || /.*\.jade$/.test(fn) || /.*\.tpl$/.test(fn);
      }, function(txt, fn) {
        if (/.*\.jade$/.test(fn)) {
          return e[whichplate][fn] = jade.compile(txt)({
            APP: e.appname,
            STATIC: "http://" + e.staticurl + "/",
            LOCAL: "http://" + e.localurl + "/"
          }).replace(/\"/g, "'");
        } else {
          return e[whichplate][fn] = replaceStaticApp(e, txt);
        }
      }, done);
    });
  };

  configureTemplates = function(e, cb) {
    var bpfn;

    bpfn = "boilerplate.tpl";
    e.templatipi = {};
    e.skeletipi = {};
    fs.readFile(__dirname + "/" + bpfn, function(err, data) {
      if (err) {
        throw err;
      }
      return fs.readFile(e.dir + "/templates/fragments/headfrag.htm", function(err, d2) {
        var i, s;

        if (err) {
          d2 = "";
        }
        s = replaceStaticApp(e, data);
        i = s.indexOf("<meta");
        s = s.substr(0, i) + String(d2) + s.substr(i);
        e.templatipi[bpfn] = s;
        return populatipi(e, e.dir + "/templates/baseplates", "templatipi", function() {
          return populatipi(e, e.dir + "/templates/skeleta", "skeletipi", function() {
            var txt;

            for (i in e.skeletipi) {
              txt = (e.templatipi[i] = e.skeletipi[i]);
              txt = txt.replace(/[\t\n\r]/g, " ");
              e.skeletipi[i] = txt.replace(/'/g, "\\'");
            }
            return buildScripts(e, JSON.stringify(e.skeletipi).replace(/\\\\\'/g, "\\'"), cb);
          });
        });
      });
    });
    return e.respond = function() {
      var args, i;

      args = [this.templatipi];
      i = 0;
      while (i < arguments.length) {
        args.push(arguments[i++]);
      }
      return justsay.respond.apply(this, args);
    };
  };

  exports.configureTemplates = configureTemplates;

}).call(this);

/*
//@ sourceMappingURL=temptools.map
*/
