// Generated by CoffeeScript 1.7.1
(function() {
  var abbreviateName, addContextField, addFiles, addInstance, addNewField, addValueBox, admin_table_fields, admin_table_names, admin_table_records, adminflag, blurFresh, callAfter, closeContextMenu, closePlusMenu, createDifferentInput, date2str, delData, destroyRichEditors, displayName, drawData, drawFieldBox, drawFields, drawInstancePage, drawListPage, drawNewColumn, drawValueBox, drawWithVox, editIndex, fadeInListPage, fadeOutListPage, findInstanceFieldHeight, getData, hideInstancePage, idvals, logOut, makeEditResizable, makeFieldResizable, makeFieldsResizable, makeIDselect, makeUploadValueBox, makeValueBox, makeVoxSelect, padStr, saveCfg, scrollDownInstancePage, scrollUpInstancePage, scrollUpWindow, setupNewField, setupNewInstanceField, setupNewListField, setupPlusButt, showAllInstanceFields, showContextMenu, showPlusButt, showPlusMenu, showRefreshButt, showSave, sortableNewField, updateInstance, uploadBad, uploadGood, uploadProgress, validateField, validateForm, vocabularies, which_route, wrapSelect;

  admin_table_fields = null;

  admin_table_records = [];

  admin_table_names = [];

  idvals = {};

  vocabularies = {};

  which_route = "";

  adminflag = false;

  abbreviateName = function(name) {
    var p;
    p = name.indexOf(".");
    if (p >= 0) {
      return abbreviateName(name.substr(p + 1));
    }
    return name;
  };

  displayName = function(field) {
    if (field.displayname) {
      return field.displayname;
    }
    return abbreviateName(field.name);
  };

  editIndex = function() {
    var $allrs, $eto, eto_i, i;
    eto_i = -1;
    $allrs = $("div.admin_table_record");
    $eto = $(".edit_this_one");
    if ($eto.length) {
      i = 0;
      while (i < $allrs.length) {
        if ($eto[0] === $allrs[i]) {
          eto_i = i;
          break;
        }
        i++;
      }
    }
    return eto_i;
  };

  showSave = function() {
    return $("i#saveconfig").show();
  };

  saveCfg = function() {
    var i;
    i = 0;
    while (i < admin_table_fields.length) {
      admin_table_fields[i].listorder = i;
      i++;
    }
    return $.post("/update_config" + which_route, {
      list: JSON.stringify(admin_table_fields)
    }, function() {
      return $("i#saveconfig").hide();
    });
  };

  logOut = function() {
    if (!which_route.length) {
      return location.href = "/sessions/new";
    } else {
      return $.post("/session/end", function() {
        return location.href = "/";
      });
    }
  };

  delData = function() {
    var $allrs, delarray, post_route;
    delarray = [];
    $allrs = $("div.admin_table_record");
    $("input.deleteme:checked").each(function() {
      var the_id;
      the_id = $(this).attr("id");
      the_id = the_id.substr(7);
      return delarray.push(the_id);
    });
    if (which_route === "/vocabs") {
      post_route = "/remove_voc";
    } else if (which_route.substr(0, 7) === "/vocab/") {
      post_route = "/remove_voc/" + which_route.substr(7);
    } else {
      post_route = "/remove_from" + which_route;
    }
    return $.post(post_route, {
      id_array: JSON.stringify(delarray)
    }, function() {
      var $nextrec, i;
      i = 0;
      while (i < $allrs.length) {
        $nextrec = $($allrs[i]);
        if ($nextrec.find("input.deleteme").is(":checked")) {
          admin_table_records[i]["_id"] = null;
          $nextrec.addClass("already_deleted");
        }
        i++;
      }
      $("input.deleteme:checked").remove();
      return $("button#less").hide();
    });
  };

  addInstance = function(o, wtf) {
    if (which_route === "/vocabs") {
      return $.post("/add_voc/" + o.vocab, {}, function() {
        admin_table_records.push(o);
        wtf();
        return false;
      });
    } else if (which_route.substr(0, 7) === "/vocab/") {
      return $.post("/add_voc/" + which_route.substr(7) + "/" + o.taxon, {}, function() {
        admin_table_records.push(o);
        wtf();
        return false;
      });
    } else {
      return $.post("/add_to" + which_route, {
        obj: JSON.stringify(o)
      }, function() {
        wtf();
        return false;
      });
    }
  };

  updateInstance = function(id, o, wtf) {
    return $.post("/update" + which_route, {
      id: id,
      obj: JSON.stringify(o)
    }, function() {
      wtf();
      return false;
    });
  };

  setupNewField = function($f, wtf) {
    $f.hover((function() {
      if ($("div.ui-resizable-resizing").length + $("div.ui-draggable-dragging").length === 0) {
        return $(this).find("i.icon-remove-sign").stop().animate({
          opacity: "1"
        }, 1234);
      }
    }), function() {
      return $(this).find("i.icon-remove-sign").stop().animate({
        opacity: "0"
      }, 123);
    });
    return $f.find("i.icon-remove-sign").click(function() {
      var field, id;
      id = this.id.substr(6);
      field = _.detect(admin_table_fields, function(f) {
        return f.name === id;
      });
      $(this).parent().remove();
      wtf(field);
      showSave();
      return showPlusButt();
    });
  };

  uploadGood = function($who) {
    $who.css({
      color: "#284",
      backgroundColor: "#fff"
    });
    return $("div#modalmask").remove();
  };

  uploadProgress = function($who) {
    return $who.css("backgroundColor", "#ffa");
  };

  uploadBad = function($who) {
    $who.css("backgroundColor", "#fba");
    return $("div#modalmask").remove();
  };

  showAllInstanceFields = function() {
    _.each(admin_table_fields, function(field) {
      if (field.name !== "id" && field.name !== "_id") {
        return field.edited = true;
      }
    });
    showSave();
    return drawInstancePage();
  };

  setupNewInstanceField = function($f, context_flag) {
    setupNewField($f, function(field) {
      field.edited = false;
      return $("input#input_" + field.name).parent().remove();
    });
    return $f.find(":first").bind("contextmenu", function() {
      var edit_flags;
      edit_flags = [];
      if (context_flag.match(/String/)) {
        edit_flags = edit_flags.concat([
          {
            name: "default",
            title: "Text"
          }
        ]);
      }
      if (context_flag === "String") {
        edit_flags = edit_flags.concat([
          {
            name: "richtext",
            title: "Rich Text Editor"
          }, {
            name: "upload",
            title: "File Upload"
          }
        ]);
      }
      showContextMenu($(this).parent().attr("id"), edit_flags);
      return false;
    });
  };

  findInstanceFieldHeight = function(field) {
    if (field.editflags === "upload") {
      return 54;
    } else if (field.editflags === "richtext") {
      if (field.editheight) {
        return field.editheight;
      }
      return 334;
    }
    return 44;
  };

  drawFieldBox = function() {
    var $fb, eto_i, id4w, skipBools, sorted, tmpw;
    $fb = $("<div class=\"instancelabels\"></div>");
    sorted = _.sortBy(admin_table_fields, function(f) {
      return f.editorder;
    });
    skipBools = false;
    if (which_route === "/admin") {
      eto_i = editIndex();
      if (eto_i >= 0) {
        skipBools = admin_table_records[eto_i]["name"] === "admin" || _.select(sorted, function(f) {
          return f.listflags === "Boolean";
        }).length === 1;
      }
    }
    $("div.instancelabels").remove();
    _.each(sorted, function(field) {
      if (field.edited && !(skipBools && field.listflags === "Boolean")) {
        return $fb.append($("<div class=\"instancelabelholder\" id=\"instance_" + field.name + "\"><div class=\"instancelabel\">" + displayName(field) + "</div></div>"));
      }
    });
    tmpw = 123;
    id4w = _.detect(admin_table_fields, function(f) {
      return f.name === "_id";
    });
    if (id4w) {
      tmpw = id4w.editwidth;
    }
    if (tmpw < 123) {
      tmpw = 123;
    }
    $fb.width(tmpw);
    $("div#detailtab").append($fb);
    if (adminflag) {
      $("div.instancelabelholder").each(function() {
        var f, fieldname;
        fieldname = $(this).attr("id");
        fieldname = fieldname.substr(fieldname.indexOf("_") + 1);
        if (fieldname !== "id" && fieldname !== "_id") {
          f = _.detect(admin_table_fields, function(field) {
            return field.name === fieldname;
          });
          $(this).append("<i id=\"close-" + fieldname + "\" class=\"icon-remove-sign\"></i>");
          return setupNewInstanceField($(this), f.listflags);
        }
      });
      setupPlusButt($("div.instancelabels").append("<i class=\"icon-plus-sign\"></i>"), showAllInstanceFields);
      $fb.resizable({
        handles: "e",
        minWidth: 123,
        maxWidth: 444,
        stop: function(e, ui) {
          _.detect(admin_table_fields, function(f) {
            return f.name === "_id";
          }).editwidth = ui.element.width();
          ui.element.css({
            left: "",
            top: ""
          });
          return showSave();
        }
      });
      return $("div.instancelabelholder").draggable({
        axis: "y",
        helper: "clone",
        stack: ".instancelabelholder",
        start: function(e, ui) {
          $("i.icon-remove-sign").stop().animate({
            opacity: "0"
          }, 123);
          return ui.helper.animate({
            borderColor: "#EEE8D5"
          }, "fast").css({
            backgroundColor: "#FDF6E3",
            zIndex: "123"
          });
        },
        stop: function(e, ui) {
          var $et, changedflag, doneflag, h, i, idstr, movedf, newlist;
          $et = $(e.target);
          idstr = $et.attr("id").substr(9);
          movedf = _.detect(sorted, function(f) {
            return f.name === idstr;
          });
          h = 0;
          newlist = [];
          doneflag = false;
          changedflag = true;
          i = 0;
          while (i < sorted.length) {
            if (sorted[i].edited) {
              if (ui.position.top <= $et.position().top) {
                if (!doneflag && ui.position.top <= h) {
                  newlist.push(movedf);
                  doneflag = true;
                  if (sorted[i] === movedf) {
                    changedflag = false;
                  }
                }
                if (sorted[i] !== movedf) {
                  newlist.push(sorted[i]);
                  if (!doneflag) {
                    h += findInstanceFieldHeight(sorted[i]);
                  }
                }
              } else {
                if (sorted[i] !== movedf) {
                  newlist.push(sorted[i]);
                  if (!doneflag) {
                    h += findInstanceFieldHeight(sorted[i]);
                  }
                }
                if (!doneflag && ui.position.top <= h) {
                  doneflag = true;
                  if (sorted[i] === movedf) {
                    changedflag = false;
                  }
                  newlist.push(movedf);
                }
              }
            } else {
              newlist.push(sorted[i]);
            }
            i++;
          }
          if (!doneflag) {
            newlist.push(movedf);
          }
          i = 0;
          while (i < newlist.length) {
            _.detect(admin_table_fields, function(f) {
              return f.name === newlist[i].name;
            }).editorder = i;
            i++;
          }
          sorted = newlist;
          if (changedflag) {
            return drawInstancePage();
          } else {
            return $(".ui-draggable-dragging").remove();
          }
        }
      }).dblclick(function() {
        var $that;
        $that = $(this);
        return $(this).find(".instancelabel").each(function() {
          $(this).replaceWith("<input class=\"minoredit\" value=\"" + $(this).html() + "\" />");
          return $that.find("input").change(function() {
            var id;
            id = $that.attr("id");
            id = id.substr(id.indexOf("_") + 1);
            _.detect(admin_table_fields, function(f) {
              return f.name === id;
            }).displayname = $(this).val();
            showSave();
            return $(this).replaceWith("<div class='instancelabel'>" + $(this).val() + "</div>");
          });
        });
      });
    }
  };

  validateField = function($instanceInput) {
    var field, fn;
    fn = $instanceInput.attr("id");
    if (!fn) {
      return true;
    }
    fn = fn.substr(7);
    field = _.detect(admin_table_fields, function(f) {
      return f.name === fn;
    });
    if (false) {
      $(this).addClass("invalid_field");
      return false;
    }
    return true;
  };

  validateForm = function() {
    var flag;
    flag = true;
    $("div.instanceinput").each(function() {
      if (!validateField($(this))) {
        return flag = false;
      }
    });
    return flag;
  };

  addFiles = function(files, $where, selected) {
    var i, l;
    l = 0;
    if (files) {
      l = files.length;
    }
    i = 0;
    while (i < l) {
      $where.append($("<div class='file_list_file'> \t\t\t\t\t<div class='filelist_name'>" + files[i].filelist_name.substr(0, 44) + "</div> \t\t\t\t\t<div class='filelist_size'>" + files[i].filelist_size + "</div> \t\t\t\t\t<div class='filelist_date'>" + files[i].filelist_date.substr(0, files[i].filelist_date.indexOf("T")) + "</div> \t\t\t\t\t</div>"));
      i++;
    }
    return $b.find("div.file_list_file").click(function() {
      return selected($(this).find("div.filelist_name").text());
    }).hover((function() {
      return $(this).animate({
        backgroundColor: "#FDF6E3"
      }, "fast");
    }), function() {
      return $(this).animate({
        backgroundColor: "#FFF"
      }, "fast");
    });
  };

  makeUploadValueBox = function($newin, field) {
    return $newin.find("input").one("click", function() {
      var $whichin;
      $whichin = $(this);
      $.ajax({
        url: "/browse" + which_route + "?subdir=" + field.uploadpath,
        cache: false,
        beforeSend: function(jqXHR, settings) {
          return settings["HTTP_X_REQUESTED_WITH"] = "XMLHttpRequest";
        },
        success: function(ajaxdata, txtsts, jqXHR) {
          var $b, $m, $t, file_list;
          file_list = $.parseJSON(ajaxdata);
          $m = $("<div class='modal_file_list'>");
          $t = $("<p class='title_file_list'>Select a file from the list, or " + "<input type='button' class='decoy' style='margin-top:1em;margin-bottom:1em' value='upload'/>" + "<input type='file' id='fileupload_" + field.name + "' name='fileupload_" + field.name + "' style='width:0px; height:0px;'/>" + " your own.</p>");
          $t.append("<div><div class='filelist_name'>Name</div> <div class='filelist_size'>Size</div> <div class='filelist_date'>Date</div></div>");
          $m.append($t);
          $m.append("<i id=\"file_list_close\" class=\"icon-remove-sign\"></i>");
          $b = $("<div class='file_list_list'>");
          $m.append($b);
          $("body").append($m);
          $("div#file_list_close").click(function() {
            $m.remove();
            return makeUploadValueBox($newin, field);
          }).animate({
            opacity: "0.5"
          }, 1234).hover((function() {
            return $(this).stop().animate({
              opacity: "1"
            }, 123);
          }), function() {
            return $(this).stop().animate({
              opacity: "0.5"
            }, 1234);
          });
          addFiles(file_list, $b, function(fn) {
            $whichin.val(fn).addClass("altered");
            $m.remove();
            return makeUploadValueBox($newin, field);
          });
          $t.find("div div").click(function() {
            var cname, i, jname, new_list, sortup;
            sortup = true;
            cname = $(this).attr("class");
            jname = cname.substr(cname.indexOf("filelist_"));
            i = jname.indexOf(" ");
            if (i > 0) {
              jname = jname.substr(0, i);
            }
            if ($(this).hasClass("sortup")) {
              $(this).removeClass("sortup");
              sortup = false;
            } else {
              $(this).addClass("sortup");
            }
            new_list = file_list;
            new_list = _.sortBy(file_list, function(f) {
              if (!sortup) {
                if (jname === "filelist_size") {
                  return -f[jname];
                } else {
                  return _.map(f[jname].split(""), function(c) {
                    return 0xffff - c.charCodeAt();
                  });
                }
              } else {
                return f[jname];
              }
            });
            $b.html("");
            return addFiles(new_list, $b, function(fn) {
              $whichin.val(fn).addClass("altered");
              $m.remove();
              return makeUploadValueBox($newin, field);
            });
          });
          return $t.find("input.decoy").click(function() {
            $(this).next().click().change(function() {
              var fn, i, uri, xhr2;
              fn = $(this).val();
              while ((i = fn.indexOf("\\")) >= 0) {
                fn = fn.substr(i + 1);
              }
              while ((i = fn.indexOf("/")) >= 0) {
                fn = fn.substr(i + 1);
              }
              $whichin.val(fn);
              xhr2 = new XMLHttpRequest();
              uri = "/upload" + which_route + "?subdir=" + field.uploadpath;
              xhr2.open("POST", uri, true);
              xhr2.upload.addEventListener("error", (function() {
                return uploadBad($whichin);
              }), false);
              xhr2.upload.addEventListener("abort", (function() {
                return uploadBad($whichin);
              }), false);
              xhr2.upload.addEventListener("progress", (function() {
                return uploadProgress($whichin);
              }), false);
              xhr2.onload = function(e) {
                if (xhr2.status !== 200) {
                  alert("Error: " + xhr2.status);
                }
                $whichin.val(xhr2.getResponseHeader("final-filename")).addClass("altered");
                uploadGood($whichin);
                return makeUploadValueBox($newin, field);
              };
              xhr2.setRequestHeader("Cache-Control", "no-cache");
              xhr2.setRequestHeader("X-Requested-With", "XMLHttpRequest");
              xhr2.setRequestHeader("X-File-Name", fn);
              $("div#context-menu").after("<div id=\"modalmask\" class=\"greyout\"></div>");
              $m.remove();
              xhr2.send(this.files[0]);
              return false;
            });
            return false;
          });
        },
        error: function(jqXHR, ststxt, err) {
          return makeUploadValueBox($newin, field);
        }
      });
      return false;
    });
  };

  padStr = function(i) {
    return (i < 10 ? "0" : "") + i;
  };

  date2str = function(d) {
    if (d) {
      if (d && d.getMonth) {
        d = d.getFullYear() + "-" + padStr(1 + d.getMonth()) + "-" + padStr(d.getDate());
      } else {
        if (d.length) {
          d = d.substr(0, d.indexOf("T"));
        }
      }
    }
    return d;
  };

  wrapSelect = function(field, s) {
    return "<select id=\"input_" + field.name + "\">" + "<option class=\"emptyprompt\"></option>" + s + "</select>";
  };

  makeIDselect = function(field) {
    var a, i, s;
    s = "";
    a = idvals[field.editflags];
    for (i in a) {
      s += "<option value=\"" + a[i].id + "\">" + a[i].name.replace(/_/g, " ") + "</option>";
    }
    return wrapSelect(field, s);
  };

  makeVoxSelect = function(field) {
    var a, i, s;
    s = "";
    a = vocabularies[field.editflags];
    for (i in a) {
      s += "<option value=\"" + a[i] + "\">" + a[i].replace(/_/g, " ") + "</option>";
    }
    return wrapSelect(field, s);
  };

  createDifferentInput = function(field, cb) {
    if (typeof field.editflags === "undefined") {
      field.editflags = "";
    }
    switch (field.editflags) {
      case "richtext":
        return cb($("<textarea class=\"enrichme\" name=\"" + field.name + "\" id=\"input_" + field.name + "\"></textarea>"));
      case "upload":
        if (!field.uploadpath) {
          field.uploadpath = "upload";
        }
        return cb($("<div class=\"uploadfields\" id=\"upload_" + field.name + "\"><span class=\"uploadurl\">...</span>&nbsp;/<span class=\"uploadpath\">" + field.uploadpath + "</span>/&nbsp;" + "<input type=\"text\" name=\"" + field.name + "\" id=\"input_" + field.name + "\"></input>" + "</div>"));
      case "":
      case "default":
        switch (field.listflags) {
          case "Boolean":
            return cb($("<input type=\"checkbox\" name=\"" + field.name + "\" id=\"input_" + field.name + "\"/>" + field.name));
          case "Date":
            return cb($("<input type=\"text\" name=\"" + field.name + "\" id=\"input_" + field.name + "\"></input>"));
          case "[String]":
            return cb($("<div class=\"multi " + field.name + "\">" + "<input type=\"text\" name=\"" + field.name + "\" id=\"input_" + field.name + "\"></input>" + "</div>"));
          default:
            return cb($("<input type=\"text\" name=\"" + field.name + "\" id=\"input_" + field.name + "\"></input>"));
        }
        break;
      default:
        switch (field.listflags) {
          case "ObjectId":
            return cb($(makeIDselect(field)));
          case "[ObjectId]":
            return cb($("<div class=\"multi " + field.name + "\">" + makeIDselect(field) + "</div>"));
          case "[String]":
            return cb($("<div class=\"multi " + field.name + "\">" + makeVoxSelect(field) + "</div>"));
          default:
            return cb($(makeVoxSelect(field)));
        }
    }
  };

  makeEditResizable = function($where) {
    return $where.resizable({
      handles: "e",
      minWidth: 124,
      maxWidth: 1234,
      helper: "ghostedinput",
      ghost: true,
      stop: function(e, ui) {
        var $the_in, id;
        $the_in = ui.element;
        if ($the_in[0].tagName !== "INPUT" && $the_in[0].tagName !== "SELECT") {
          $the_in = $the_in.find("INPUT");
        }
        id = $the_in.attr("id");
        id = id.substr(id.indexOf("_") + 1);
        if ($the_in.parent().hasClass("multi")) {
          id = id.substr(0, id.indexOf("_"));
        }
        $the_in.width(_.detect(admin_table_fields, function(f) {
          return f.name === id;
        }).editwidth = ui.element.width());
        return showSave();
      }
    });
  };

  addValueBox = function(field, $newin, $where, eto_i) {
    var $nxton, $setthisone, cki, h, i, valtoset;
    $where.append($newin);
    h = findInstanceFieldHeight(field);
    $newin.add($where).height(h).width(field.editwidth);
    $("div#instance_" + field.name).height(h);
    if (eto_i >= 0) {
      if (field.editflags === "upload") {
        $setthisone = $newin.find("input:first");
      } else {
        $setthisone = $newin;
      }
      valtoset = admin_table_records[eto_i][field.name];
      switch (field.listflags) {
        case "Date":
          $setthisone.val(date2str(valtoset));
          break;
        case "Boolean":
          $setthisone.attr("checked", valtoset);
          break;
        case "[String]":
        case "[ObjectId]":
          i = 0;
          $setthisone = $newin.find("input,select");
          if (valtoset && valtoset.length) {
            i = 0;
            while (i < valtoset.length) {
              $nxton = $setthisone.clone();
              $nxton.attr("id", $setthisone.attr("id") + "_" + i);
              $nxton.val(valtoset[i]);
              $nxton.insertBefore($setthisone);
              $nxton.width(field.edithwidth);
              i++;
            }
          }
          $setthisone.width(field.edithwidth);
          break;
        default:
          $setthisone.val(valtoset);
      }
    } else {
      $newin.val("");
    }
    if ($newin.hasClass("multi")) {
      $newin.add($newin.parent()).removeAttr("width").css("width", "auto");
      $newin.find("select").height(h);
    } else {
      $newin.width(field.editwidth);
    }
    if (field.editflags !== "upload") {
      $newin.find("input,select").width(field.editwidth);
    }
    $newin.change(function() {
      var $lastone, $newon, kids;
      $(this).addClass("altered");
      if ($(this).hasClass("multi")) {
        $lastone = $(this).find("select:last, input:last");
        kids = $(this).children();
        if ($lastone.val().length) {
          $newon = $lastone.clone();
          $newon.val("");
          $lastone.attr("id", $lastone.attr("id") + "_" + (kids.length - 1));
          $newon.insertAfter($lastone);
        } else {
          if (kids.length) {
            i = 0;
            while (i < kids.length - 1) {
              if (!$(kids[i]).val().length) {
                $(kids[i]).remove();
              }
              i++;
            }
          }
        }
      }
      if (validateField($(this), eto_i)) {
        if (validateForm(eto_i)) {
          return $("button#save").show();
        }
      } else {
        return $("button#save").hide();
      }
    });
    if (field.editflags === "upload") {
      makeUploadValueBox($newin, field);
    } else if (field.listflags === "Date") {
      $newin.datepicker({
        dateFormat: "yy-mm-dd",
        defaultDate: $newin.val()
      });
    }
    if (adminflag) {
      if (field.editflags === "default" || field.editflags === "") {
        makeEditResizable($where);
      }
      if (field.editflags === "upload") {
        $newin.find("span.uploadpath").css("color", "#9bd").click(function() {
          return $("<input type='text' class='temp' value='" + $(this).text() + "'>").insertAfter($(this).hide()).focus().blur(function() {
            var $target, id, txt;
            $target = $(this).parent().find("span.uploadpath");
            if ($target.text() !== $(this).val()) {
              txt = $(this).val();
              while (txt.length && (txt.charAt(0) === "/")) {
                txt = txt.substr(1, txt.length - 1);
              }
              while (txt.length && (txt.charAt(txt.length - 1) === "/")) {
                txt = txt.substr(0, txt.length - 1);
              }
              $target.text(txt);
              id = $(this).parent().parent().attr("id");
              id = id.substr(id.indexOf("_") + 1);
              _.detect(admin_table_fields, function(f) {
                return f.name === id;
              }).uploadpath = txt;
              showSave();
            }
            $target.show();
            return $(this).remove();
          });
        });
      }
    }
    if ($newin.hasClass("enrichme")) {
      cki = CKEDITOR.instances["input_" + field.name];
      if (cki) {
        cki.destroy();
      }
      $newin.ckeditor((function() {
        var $instance, spanid;
        spanid = this.container.$.id;
        $instance = $("#" + spanid).parent();
        h = $("#" + spanid).height();
        spanid = spanid.substr(spanid.indexOf("input_") + 6);
        field = _.detect(admin_table_fields, function(f) {
          return f.name === spanid;
        });
        if (field.editheight) {
          h = field.editheight;
          $("#" + spanid).height(h);
          this.resize(field.editwidth, field.editheight);
        }
        $instance.height(h);
        return $("div#instance_" + spanid).height(h);
      }), {
        skin: "v2",
        filebrowserBrowseUrl: "/ck_browse",
        filebrowserUploadUrl: "/ck_upload"
      });
      cki = CKEDITOR.instances["input_" + field.name];
      if (cki) {
        cki.on("resize", function(e) {
          var f_id, w;
          f_id = this.container.$.id;
          i = f_id.indexOf("input_") + 6;
          f_id = f_id.substr(i);
          field = _.detect(admin_table_fields, function(f) {
            return f.name === f_id;
          });
          w = $(e.editor.getResizable().$).width();
          h = $(e.editor.getResizable().$).height();
          if (adminflag && (w !== field.editwidth || h !== field.editheight)) {
            field.editwidth = w;
            field.editheight = h;
            showSave();
          }
          $("div#instance_" + field.name).height(field.editheight);
          $("div#instin_" + field.name).height(field.editheight);
          e.editor.resetDirty();
          return false;
        });
      }
      return $where.width("999px");
    }
  };

  makeValueBox = function(field, $where, eto_i) {
    return createDifferentInput(field, function($newin) {
      return addValueBox(field, $newin, $where, eto_i);
    });
  };

  drawValueBox = function() {
    var $eto, $vb, eto_i, skipBools, sorted;
    $vb = $("<div class=\"instanceinputs\"></div>");
    $eto = $(".edit_this_one");
    eto_i = editIndex();
    skipBools = false;
    if (which_route === "/admin") {
      eto_i = editIndex();
      if (eto_i >= 0) {
        skipBools = admin_table_records[eto_i]["name"] === "admin" || _.select(sorted, function(f) {
          return f.listflags === "Boolean";
        }).length === 1;
      }
    }
    $("div.instanceinputs").remove();
    $("div#detailtab").append($vb);
    sorted = _.sortBy(admin_table_fields, function(f) {
      return f.editorder;
    });
    _.each(sorted, function(field) {
      var $commontainer;
      if (field.edited) {
        if (!(skipBools && field.listflags === "Boolean")) {
          $commontainer = $("<div class=\"instanceinput\" id=\"instin_" + field.name + "\"></div>");
          $vb.append($commontainer);
          return makeValueBox(field, $commontainer, eto_i);
        } else {
          if (field.listflags === "[String]") {
            return console.log(" I think i need to do something here ...");
          }
        }
      }
    });
    $vb.append("<button id=\"save\">Save</button><button id=\"cancel\">Cancel</button>\"");
    $("button#cancel").click(function() {
      return hideInstancePage();
    });
    return $("button#save").click(function() {
      var instance, newobj, nowtoday;
      newobj = {};
      for (instance in CKEDITOR.instances) {
        if (CKEDITOR.instances[instance].checkDirty()) {
          CKEDITOR.instances[instance].updateElement();
          $("#" + instance).addClass("altered");
        }
      }
      $(".instanceinput .altered").each(function() {
        var $f, field, fieldname, i, kids;
        if ($(this).hasClass("multi")) {
          kids = $(this).children();
          if (kids.length) {
            fieldname = $(kids[kids.length - 1]).attr("id");
          }
        } else {
          fieldname = $(this).attr("id");
        }
        fieldname = fieldname.substr(fieldname.indexOf("_") + 1);
        field = _.detect(admin_table_fields, function(f) {
          return f.name === fieldname;
        });
        switch (field.listflags) {
          case "[String]":
          case "[ObjectId]":
            newobj[fieldname] = [];
            kids = $(this).children();
            if (kids.length) {
              i = 0;
              while (i < kids.length - 1) {
                if ($(kids[i]).val().length) {
                  newobj[fieldname].push($(kids[i]).val());
                }
                i++;
              }
            }
            break;
          case "Date":
            newobj[fieldname] = new Date($(this).val().replace(/-/g, "/"));
            break;
          case "Boolean":
            newobj[fieldname] = $(this).is(":checked");
            break;
          default:
            newobj[fieldname] = $(this).val();
        }
        if (eto_i >= 0) {
          admin_table_records[eto_i][fieldname] = newobj[fieldname];
          $f = $eto.find("div.record_field_" + fieldname);
          if (field.listflags === "Boolean") {
            return $f.html(($(this).is(":checked") ? "&#9746" : "")).css({
              textAlign: "center"
            });
          } else if (field.listflags === "[String]" || field.listflags === "[ObjectId]") {
            $f.html("");
            if (newobj[field.name]) {
              if (newobj[field.name].length === 1) {
                return $f.html(newobj[field.name][0]);
              } else {
                if (newobj[field.name].length) {
                  return $f.html(newobj[field.name][0] + "...");
                }
              }
            }
          } else {
            return $f.text($(this).val());
          }
        }
      });
      $("input.hasDatepicker").each(function() {
        return $(this).datepicker("destroy");
      });
      if (eto_i >= 0) {
        if (admin_table_records[eto_i]["modified_date"]) {
          nowtoday = new Date();
          admin_table_records[eto_i]["modified_date"] = nowtoday;
          $eto.find("div.record_field_modified_date").text(date2str(nowtoday));
        }
        return setTimeout((function() {
          return updateInstance(admin_table_records[eto_i]["_id"], newobj, function() {
            $eto.removeClass("edit_this_one").addClass("already_edited");
            return hideInstancePage();
          });
        }), 23);
      } else {
        return addInstance(newobj, function() {
          return drawListPage();
        });
      }
    });
  };

  fadeInListPage = function() {
    return $("div#maintab").addClass("current").stop().css({
      display: "block",
      opacity: "0.1"
    }).animate({
      opacity: "1.0"
    }, 666, function() {
      $(this).css("opacity", "1.0");
      return showPlusButt();
    });
  };

  fadeOutListPage = function() {
    return $("div#maintab").removeClass("current").stop().animate({
      opacity: "0.1"
    }, 666, function() {
      $(this).css("opacity", "0");
      return $(this).css("display", "none");
    });
  };

  scrollDownInstancePage = function(cb) {
    var h;
    h = $(window).height() + 23;
    return $("div#detailtab").removeClass("current").stop().animate({
      top: h + "px"
    }, {
      duration: 666,
      complete: function() {
        return $(this).css("display", "none").html("");
      },
      step: function(now, fx) {
        if (h) {
          if (now > h / 4) {
            h = 0;
            return cb();
          }
        }
      }
    });
  };

  scrollUpInstancePage = function() {
    return $("div#detailtab").addClass("current").stop().css("display", "block").animate({
      top: "99px"
    }, 666, function() {
      return showPlusButt();
    });
  };

  scrollUpWindow = function() {
    return $("html, body").animate({
      scrollTop: 0
    }, 666);
  };

  destroyRichEditors = function() {
    var cki, i, _results;
    if (typeof CKEDITOR !== "undefined") {
      _results = [];
      for (cki in CKEDITOR.instances) {
        i = CKEDITOR.instances[cki];
        _results.push(i.destroy(false));
      }
      return _results;
    }
  };

  hideInstancePage = function() {
    if ($("div#detailtab").css("display") !== "none") {
      scrollUpWindow();
      scrollDownInstancePage(fadeInListPage);
    }
    return destroyRichEditors();
  };

  drawWithVox = function() {
    destroyRichEditors();
    drawFieldBox();
    drawValueBox();
    scrollUpWindow();
    scrollUpInstancePage();
    return fadeOutListPage();
  };

  drawInstancePage = function() {
    closePlusMenu();
    vocabularies = {};
    return justsayAJAJ("/vox_n_tax", function(o) {
      vocabularies = o;
      return drawWithVox();
    });
  };

  drawListPage = function() {
    $("div.admin_table_records").html("");
    if (which_route === "/vocabs" || which_route.substr(0, 7) === "/vocab/") {
      drawData(0);
    } else {
      admin_table_records.length = 0;
      getData();
    }
    return hideInstancePage();
  };

  closeContextMenu = function() {
    $("div#modalmask").remove();
    $("div#context-menu").html("").fadeOut();
    return false;
  };

  addContextField = function(id, name, title) {
    if (!title) {
      title = name;
    }
    return $("div#context-menu-fields").append($("<div class=\"context-field\" id=\"" + id + "_context_" + name + "\">" + title + "</div>"));
  };

  showContextMenu = function(field_id, whichtags) {
    var $loc, plusvoxflag, tt, vocab;
    $loc = $("div#" + field_id + " >div");
    field_id = field_id.substr(9);
    $("div#context-menu").html("<div id=\"context-menu-fields\"></div>").css({
      left: 23 + $loc.offset().left,
      top: $loc.offset().top
    }).after("<div id=\"modalmask\"></div>");
    if (whichtags.length) {
      _.each(whichtags, function(tag) {
        return addContextField(field_id, tag.name, tag.title);
      });
      plusvoxflag = true;
      for (vocab in vocabularies) {
        if (vocabularies[vocab].length) {
          if (plusvoxflag) {
            $("div#context-menu-fields").append("<div class='contextmenubreak'></div>");
            plusvoxflag = false;
          }
          addContextField(field_id, vocab);
        }
      }
    } else {
      addContextField(field_id, "", "raw ID");
      $("div#context-menu-fields").append("<div class='contextmenubreak'></div>");
      tt = $("a#table-name").text();
      _.each(admin_table_names, function(t) {
        if (t !== tt) {
          return addContextField(field_id, t);
        }
      });
    }
    $("div#modalmask").click(function() {
      return closeContextMenu();
    });
    $("div.context-field").hover(function() {
      return $(this).css("background-color", "#fff");
    }, function() {
      return $(this).css("background", "transparent");
    }).click(function() {
      var $where, eto_i, f_id, field, flag_name, i;
      f_id = $(this).attr("id");
      i = f_id.indexOf("_context_");
      flag_name = f_id.substr(i + 9);
      f_id = f_id.substr(0, i);
      field = _.detect(admin_table_fields, function(f) {
        return f.name === f_id;
      });
      if (field.editflags !== flag_name) {
        field.editflags = flag_name;
        showSave();
        eto_i = editIndex();
        $where = $("div#instin_" + field.name);
        $where.empty();
        makeValueBox(field, $where, eto_i);
        if (field.editflags === "default" || field.editflags === "") {
          makeEditResizable($where);
        }
      }
      return closeContextMenu();
    });
    return $("div#context-menu").fadeIn(666);
  };

  closePlusMenu = function() {
    $("div#plus-menu").html("").fadeOut();
    $("div#modalmask").remove();
    return false;
  };

  showPlusMenu = function() {
    $("div#plus-menu").html("<div id=\"plus-menu-fields\"></div>").css({
      left: $("div.current i.icon-plus-sign").offset().left,
      top: $("div.current i.icon-plus-sign").offset().top
    }).after("<div id=\"modalmask\"></div>");
    $("div#modalmask").click(function() {
      return closePlusMenu();
    });
    _.each(admin_table_fields, function(field) {
      var $f;
      if ($("div#maintab").hasClass("current") && !field.listed || $("div#detailtab").hasClass("current") && !field.edited) {
        $f = $("<div class=\"plus-field\" id=\"plus_menu_field_" + field.name + "\"></div>");
        $f.html(field.name);
        return $("div#plus-menu-fields").append($f);
      }
    });
    $("div.plus-field").hover(function() {
      return $(this).css("background-color", "#fff");
    }, function() {
      return $(this).css("background", "transparent");
    }).click(function() {
      var $f, field, id;
      id = this.id.substr(16);
      field = _.detect(admin_table_fields, function(f) {
        return f.name === id;
      });
      field.listed = true;
      $f = addNewField(field);
      drawNewColumn(field);
      makeFieldResizable($f);
      showSave();
      showPlusButt();
      return closePlusMenu();
    });
    return $("div#plus-menu").fadeIn(666);
  };

  showPlusButt = function() {
    if ($("div#maintab").hasClass("current")) {
      if (_.all(admin_table_fields, function(f) {
        return f.listed || f.name === "_id" || f.name === "id";
      })) {
        return $("div.current i.icon-plus-sign").fadeOut();
      } else {
        return $("div.current i.icon-plus-sign").fadeIn(666, function() {
          return $("div.current i.icon-plus-sign").animate({
            opacity: "0.5"
          }, 1234);
        });
      }
    } else {
      if (_.all(admin_table_fields, function(f) {
        return f.edited || f.name === "_id" || f.name === "id";
      })) {
        return $("div.current i.icon-plus-sign").fadeOut();
      } else {
        return $("div.current i.icon-plus-sign").fadeIn(666, function() {
          return $("div.current i.icon-plus-sign").animate({
            opacity: "0.5"
          }, 1234);
        });
      }
    }
  };

  blurFresh = function() {
    return $("i#refreshbutt").css("color", "#bbb");
  };

  showRefreshButt = function() {
    return $("i#refreshbutt").show().click(function() {
      var tmp;
      tmp = $(this).click(false);
      return justsayAJAJ("/refresh", (function() {
        $(this).click(tmp);
        return blurFresh();
      }), blurFresh, {});
    }).hover((function() {
      return $(this).css("color", "#fff");
    }), blurFresh);
  };

  setupPlusButt = function($plusbutt, wtf) {
    return $plusbutt.find("i.icon-plus-sign").css({
      opacity: "0.5"
    }).hover(function() {
      return $("div.current i.icon-plus-sign").stop().animate({
        opacity: "1"
      }, 123);
    }, function() {
      return $("div.current i.icon-plus-sign").stop().animate({
        opacity: "0.5"
      }, 1234);
    }).click(function() {
      wtf();
      return false;
    });
  };

  makeFieldResizable = function($f) {
    if (adminflag) {
      return $f.resizable({
        handles: "e",
        minWidth: 44,
        maxWidth: 444,
        alsoResize: ".record_" + $f.attr("id"),
        start: function(e, ui) {
          ui.element.css({
            position: ""
          });
          return $("i.icon-remove-sign").stop().animate({
            opacity: "0"
          }, 123);
        },
        resize: function(e, ui) {
          return ui.element.css({
            left: "0px"
          });
        },
        stop: function(e, ui) {
          _.detect(admin_table_fields, function(f) {
            return f.name === ui.element.attr("id").substr(6);
          }).listwidth = ui.element.width();
          ui.element.css({
            position: "",
            left: "",
            top: ""
          }).find(".ui-resizable-handle").css({
            left: "",
            right: "0px"
          });
          return showSave();
        }
      }).draggable({
        axis: "x",
        helper: "clone",
        stack: ".admin_table_field",
        start: function(e, ui) {
          $("i.icon-remove-sign").stop().animate({
            opacity: "0"
          }, 123);
          return ui.helper.animate({
            borderColor: "#EEE8D5"
          }, "fast").css({
            backgroundColor: "#FDF6E3",
            zIndex: "123"
          });
        },
        stop: function(e, ui) {
          var $et, changedflag, doneflag, i, idstr, movedf, newlist, w;
          newlist = [];
          $et = $(e.target);
          $et.css({
            position: ""
          });
          idstr = $et.find("i.icon-remove-sign").attr("id").substr(6);
          movedf = _.detect(admin_table_fields, function(f) {
            return f.name === idstr;
          });
          w = $("div.admin_table_fields").offset().left;
          doneflag = false;
          changedflag = true;
          i = 0;
          while (i < admin_table_fields.length) {
            if (admin_table_fields[i].listed) {
              if (ui.position.left <= $et.position().left) {
                if (!doneflag && ui.position.left <= w) {
                  newlist.push(movedf);
                  w += movedf.listwidth;
                  doneflag = true;
                  if (admin_table_fields[i] === movedf) {
                    changedflag = false;
                  }
                }
                if (admin_table_fields[i] !== movedf) {
                  newlist.push(admin_table_fields[i]);
                  w += admin_table_fields[i].listwidth;
                }
              } else {
                if (admin_table_fields[i] !== movedf) {
                  newlist.push(admin_table_fields[i]);
                  w += admin_table_fields[i].listwidth;
                }
                if (!doneflag && ui.position.left <= w + movedf.listwidth) {
                  newlist.push(movedf);
                  w += movedf.listwidth;
                  doneflag = true;
                  if (admin_table_fields[i] === movedf) {
                    changedflag = false;
                  }
                }
              }
            }
            i++;
          }
          if (!doneflag) {
            newlist.push(movedf);
          }
          admin_table_fields = newlist;
          if (changedflag) {
            drawFields();
            drawData(0);
            return showSave();
          }
        }
      });
    }
  };

  makeFieldsResizable = function() {
    return $(".admin_table_field").each(function() {
      return makeFieldResizable($(this));
    });
  };

  setupNewListField = function($f) {
    return setupNewField($f, function(field) {
      field.listed = false;
      return $("div.record_field_" + field.name).remove();
    });
  };

  sortableNewField = function($f) {
    return $f.dblclick(function() {
      var $b;
      $b = $(this).find("i.icon-caret-up");
      if ($b.hasClass("stayVisible")) {
        $b = $(this).find("i.icon-caret-down");
      } else {
        if ($(this).find("i.icon-caret-down").hasClass("stayVisible")) {
          $b = null;
        }
      }
      $(".stayVisible").removeClass("stayVisible").css("visibility", "hidden");
      if ($b) {
        $b.addClass("stayVisible").css("visibility", "visible");
      }
      admin_table_records.length = 0;
      $("div.admin_table_records").html("");
      getData();
      return false;
    });
  };

  drawNewColumn = function(field) {
    var $allrs, $f, i, _results;
    $allrs = $("div.admin_table_record");
    i = 0;
    _results = [];
    while (i < $allrs.length) {
      $f = $("<div class=\"admin_table_record_field record_field_" + field.name + "\"></div>");
      $f.width(field.listwidth);
      if (field.listflags === "Date") {
        $f.text(date2str(admin_table_records[i][field.name]));
      } else if (field.listflags === "Boolean") {
        $f.html((admin_table_records[i][field.name] ? "&#9746" : "")).css({
          textAlign: "center"
        });
      } else if (field.listflags === "[String]" || field.listflags === "[ObjectId]") {
        if (admin_table_records[i][field.name]) {
          if (admin_table_records[i][field.name].length === 1) {
            $f.html(admin_table_records[i][field.name][0]);
          } else {
            $f.html(admin_table_records[i][field.name][0] + "...");
          }
        }
      } else {
        $f.html(admin_table_records[i][field.name]);
      }
      $($allrs[i]).append($f);
      _results.push(i++);
    }
    return _results;
  };

  drawData = function(pos) {
    var $allrs, $r, i, keyfieldname;
    $("div#addmore").remove();
    $allrs = $("div.admin_table_records");
    if ($allrs.length === 0) {
      $allrs = $("<div class=\"admin_table_records\"></div>");
      $("div.admin_table_fields").after($allrs);
    }
    i = pos;
    while (i < admin_table_records.length) {
      $r = $("<div class=\"admin_table_record\"></div>");
      if (admin_table_records[i]["_id"] === null) {
        $r.addClass("already_deleted");
      } else {
        if (which_route === "/vocabs") {
          keyfieldname = "vocab";
        } else if (which_route.substr(0, 7) === "/vocab/") {
          keyfieldname = "taxon";
        } else {
          keyfieldname = "_id";
        }
        $r.append("<input type=\"checkbox\" class=\"deleteme\" id=\"delete_" + admin_table_records[i][keyfieldname] + "\" /></div>");
      }
      $allrs.append($r);
      _.each(admin_table_fields, function(field) {
        var $f, a, j, list_content;
        if (field.listed) {
          if (field.listflags === "Date") {
            list_content = date2str(admin_table_records[i][field.name]);
          } else if (field.listflags === "ObjectId" && field.editflags !== "") {
            a = idvals[field.editflags];
            j = 0;
            while (j < a.length) {
              if (a[j].id === admin_table_records[i][field.name]) {
                list_content = a[j].name;
                break;
              }
              j++;
            }
          } else {
            list_content = admin_table_records[i][field.name];
            if (field.listflags === "[String]") {
              if (!list_content || !list_content.length) {
                list_content = "";
              } else if (list_content.length === 1) {
                list_content = list_content[0];
              } else {
                list_content = list_content[0] + "...";
              }
            } else if (field.listflags === "[ObjectId]") {
              if (!list_content || !list_content.length) {
                list_content = "";
              } else {
                if (a = idvals[field.editflags]) {
                  j = 0;
                  while (j < a.length) {
                    if (a[j].id === list_content[0]) {
                      if (list_content.length === 1) {
                        list_content = a[j].name;
                      } else {
                        list_content = a[j].name + "...";
                      }
                      break;
                    }
                    j++;
                  }
                }
              }
            } else {
              if (field.listflags !== "Boolean") {
                if (list_content) {
                  if (list_content.length > 69) {
                    list_content = list_content.substr(0, 69);
                  }
                }
              }
            }
          }
          $f = $("<div class=\"admin_table_record_field record_field_" + field.name + "\"></div>");
          $f.width(field.listwidth);
          if (field.listflags === "Boolean") {
            $f.html((list_content ? "&#9746" : "")).css({
              textAlign: "center"
            });
          } else {
            $f.text(list_content);
          }
          return $r.append($f);
        }
      });
      i++;
    }
    makeFieldsResizable();
    $("input.deleteme").hover(function() {
      if (!$(this).is(":checked")) {
        return $(this).animate({
          opacity: "1"
        }, 333);
      }
    }, function() {
      if (!$(this).is(":checked")) {
        return $(this).animate({
          opacity: "0"
        }, 123);
      }
    }).click(function(e) {
      if ($(".deleteme:checked").length) {
        $("button#less").show();
      } else {
        $("button#less").hide();
      }
      return e.stopPropagation();
    });
    $allrs.append("<div id=\"addmore\"></div>");
    $("div#addmore").append("<button id=\"less\">DELETE</button>");
    if ($(".deleteme:checked").length) {
      $("button#less").show();
    }
    $("button#less").click(function() {
      delData();
      return false;
    });
    if (i - pos === 20) {
      $("div#addmore").append("<button id=\"more\">More ...</button>");
      $("button#more").click(function() {
        return getData();
      });
    }
    $("div#addmore").append('<button id="add">ADD</button>');
    $("button#add").click(function() {
      $("div.edit_this_one").removeClass("edit_this_one");
      return drawInstancePage();
    });
    return $("div.admin_table_record").hover(function() {
      $("div.admin_table_record").find(".hovering").removeClass("hovering");
      return $(this).addClass("hovering");
    }, function() {
      return $(this).removeClass("hovering");
    }).click(function() {
      if (which_route === "/vocabs") {
        location.hash = "/vocab/" + ($(this).text());
      } else if (which_route.substr(0, 7) !== "/vocab/") {
        $("div.edit_this_one").removeClass("edit_this_one");
        if (!$(this).hasClass("already_deleted")) {
          $(this).addClass("edit_this_one");
          drawInstancePage();
        }
      }
      return false;
    });
  };

  getData = function() {
    var route;
    route = "" + which_route + "/list/" + admin_table_records.length;
    $(".stayVisible").each(function() {
      var name, order;
      name = this.id.substr(this.id.indexOf("-") + 1);
      order = this.id.substr(0, this.id.indexOf("-"));
      if (order === "desc") {
        name = "-" + name;
      }
      return route = route + "/" + name;
    });
    return $.ajax({
      url: route,
      cache: false,
      beforeSend: function(jqXHR, settings) {
        return settings["HTTP_X_REQUESTED_WITH"] = "XMLHttpRequest";
      },
      success: function(ajaxdata, txtsts, jqXHR) {
        var i;
        i = admin_table_records.length;
        admin_table_records = admin_table_records.concat($.parseJSON(ajaxdata));
        return drawData(i);
      },
      error: function(jqXHR, ststxt, err) {
        return drawData(0);
      }
    });
  };

  addNewField = function(field) {
    var $f, $p, i, newlist;
    $f = $('<div id="field_' + field.name + '" class="admin_table_field"></div>');
    $f.width(field.listwidth).html(displayName(field));
    if (($p = $("div.current i.icon-plus-sign")).length) {
      $p.before($f);
    } else {
      $("div.admin_table_fields").append($f);
    }
    if (which_route !== "/vocabs" && which_route.substr(0, 7) !== "/vocab/") {
      $f.append('<i id="desc-' + field.name + '" class="icon-caret-down"></div>  <i id="asc-' + field.name + '" class="icon-caret-up"></div>');
      if (adminflag) {
        $f.append('<i id="close-' + field.name + '" class="icon-remove-sign"></i>');
        setupNewListField($f);
      }
      sortableNewField($f);
      newlist = [];
      i = 0;
      while (i < admin_table_fields.length) {
        if (admin_table_fields[i] !== field) {
          newlist.push(admin_table_fields[i]);
        }
        i++;
      }
      newlist.push(field);
      admin_table_fields = newlist;
    }
    return $f;
  };

  drawFields = function() {
    $("div#maintab").html('<div class="admin_table_fields"></div>');
    _.each(admin_table_fields, function(field) {
      if (field.listed) {
        return addNewField(field);
      }
    });
    if (adminflag) {
      setupPlusButt($("div.admin_table_fields").append('<i class="icon-plus-sign"></i>'), showPlusMenu);
      return showPlusButt();
    }
  };

  callAfter = function(route, from) {
    var $b, callcount, getDataAfter;
    which_route = "/" + route;
    if (!_.isArray(from)) {
      admin_table_names.length = 0;
      admin_table_records.length = 0;
      $("div.admin_table_records").html("");
      $("a#table-name").html("");
      from.find("a.table").each(function() {
        var t;
        t = $(this).text();
        if (t === "admin") {
          adminflag = true;
          return showRefreshButt();
        } else {
          return admin_table_names.push(t);
        }
      });
      if (admin_table_names.length === 1) {
        hideInstancePage();
        location.hash = "/" + admin_table_names[0];
      }
    } else {
      if (which_route === "/vocabs") {
        admin_table_fields = [
          {
            name: "vocab",
            listed: true,
            edited: true,
            listwidth: 123,
            editwidth: 123
          }
        ];
        admin_table_records = from;
        drawFields();
        drawData(0);
      } else if (which_route.substr(0, 7) === "/vocab/") {
        admin_table_fields = [
          {
            name: "taxon",
            listed: true,
            edited: true,
            listwidth: 123,
            editwidth: 123
          }
        ];
        admin_table_records = _.select(from, function(f) {
          return f.taxon;
        });
        drawFields();
        drawData(0);
      } else {
        admin_table_fields = from;
        if (which_route === "/admin") {
          if (adminflag || _.select(admin_table_fields, function(f) {
            return f.listflags === "Boolean";
          }).length === 1) {
            _.each(admin_table_fields, function(field) {
              if (field.listflags === "Boolean") {
                return field.listed = false;
              }
            });
          }
        }
        drawFields();
        callcount = 1;
        _.each(admin_table_fields, function(field) {
          if (field.listflags.match(/ObjectId/) && field.editflags !== "" && !idvals[field.editflags]) {
            return callcount++;
          }
        });
        getDataAfter = _.after(callcount, getData);
        _.each(admin_table_fields, function(field) {
          if (field.listflags.match(/ObjectId/) && field.editflags !== "" && !idvals[field.editflags]) {
            return justsayAJAJ("/keys/" + field.editflags, function(a) {
              idvals[field.editflags] = a;
              return getDataAfter();
            });
          }
        });
        getDataAfter();
      }
      $("a#table-name").html(route);
      $("button#loginlogout").html("Logout").show();
    }
    $b = $("button#loginlogout");
    if (route.substr(0, 8) === "") {
      $b.html("Login").show();
    } else if (route.substr(0, 8) !== "/session") {
      $b.html("Logout").show();
    } else {
      $b.hide();
    }
    $b.click(function() {
      return logOut();
    });
    $("i#saveconfig").click(function() {
      return saveCfg();
    });
    return hideInstancePage();
  };

  justsayUpdate(callAfter);

  $("button#loginlogout").click(function() {
    return logOut();
  });

  $.getScript("http://" + justsayno.de.localurl + "/ckeditor/ckeditor.js", function(d, s) {
    return $.getScript("http://" + justsayno.de.localurl + "/ckeditor/adapters/jquery.js", function(data, status) {});
  });

  $("input#login").focus();

}).call(this);
