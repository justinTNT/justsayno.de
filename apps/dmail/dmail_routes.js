// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function(env) {
    var Guest;
    Guest = env.db.model('Guest');
    env.app.get('/registration', function(req, res, next) {
      var temps, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      if (!((_ref = req.session) != null ? (_ref1 = _ref.user) != null ? (_ref2 = _ref1.handle) != null ? _ref2.length : void 0 : void 0 : void 0)) {
        return res.redirect("/register");
      }
      if ((_ref3 = req.session) != null ? (_ref4 = _ref3.user) != null ? (_ref5 = _ref4.pass) != null ? _ref5.length : void 0 : void 0 : void 0) {
        return res.redirect("/user/" + req.session.user.handle);
      }
      temps = [
        {
          selector: '#main',
          filename: 'registration.jade'
        }
      ];
      return env.respond(req, res, env.basetemps, temps, {
        handle: req.session.user.handle
      });
    });
    env.app.get('/deregister', function(req, res, next) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      if ((_ref = req.session) != null ? (_ref1 = _ref.user) != null ? (_ref2 = _ref1.pass) != null ? _ref2.length : void 0 : void 0 : void 0) {
        return res.redirect("/user/" + req.session.user.handle);
      }
      if (!((_ref3 = req.session) != null ? (_ref4 = _ref3.user) != null ? (_ref5 = _ref4.handle) != null ? _ref5.length : void 0 : void 0 : void 0)) {
        return res.redirect("/register");
      }
      return Guest.remove({
        handle: req.session.user.handle
      }, function(err, docs) {
        return res.redirect('/logout');
      });
    });
    env.app.get('/register', function(req, res, next) {
      var temps, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      if ((_ref = req.session) != null ? (_ref1 = _ref.user) != null ? (_ref2 = _ref1.pass) != null ? _ref2.length : void 0 : void 0 : void 0) {
        return res.redirect("/user/" + req.session.user.handle);
      }
      if ((_ref3 = req.session) != null ? (_ref4 = _ref3.user) != null ? (_ref5 = _ref4.handle) != null ? _ref5.length : void 0 : void 0 : void 0) {
        return res.redirect("/registration");
      }
      temps = [
        {
          selector: '#main',
          filename: 'rego.jade'
        }
      ];
      return env.respond(req, res, env.basetemps, temps, null);
    });
    env.app.get('/user/:handle', function(req, res, next) {
      var o, temps, _ref, _ref1;
      if (((_ref = req.session) != null ? (_ref1 = _ref.user) != null ? _ref1.handle : void 0 : void 0) !== req.params.handle) {
        return res.redirect('/register');
      }
      temps = [
        {
          selector: '#main',
          filename: 'user.jade'
        }
      ];
      o = {
        handle: req.params.handle
      };
      return env.respond(req, res, env.basetemps, temps, o);
    });
    return env.app.post('/preregister', function(req, res, next) {
      var _ref, _ref1, _ref2;
      if ((_ref = req.session) != null ? (_ref1 = _ref.user) != null ? (_ref2 = _ref1.handle) != null ? _ref2.length : void 0 : void 0 : void 0) {
        return res.redirect("/user/" + req.session.user.handle);
      }
      if (!req.body.handle.match(/^[a-z0-9_]+$/)) {
        return res.send('Not a valid email address', 404);
      }
      return Guest.find({
        handle: req.body.handle
      }, function(err, docs) {
        var g;
        if (err) {
          throw err;
        }
        if (docs != null ? docs.length : void 0) {
          return res.send('That user already exists', 404);
        }
        g = new Guest({
          handle: req.body.handle,
          verified: false
        });
        return g.save(function(err) {
          if (err) {
            console.log("ERROR adding new user " + g.handle);
            delete req.session.user;
            g = {};
          } else {
            req.session.user = _.clone(g);
            console.log("initiated new user " + g.handle);
          }
          return env.respond(req, res, null, null, g);
        });
      });
    });
  };

}).call(this);

//# sourceMappingURL=dmail_routes.map
