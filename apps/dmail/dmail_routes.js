// Generated by CoffeeScript 1.7.1
(function() {
  var crypto, mailuser, request;

  mailuser = require('./schema/mailuser').name;

  crypto = require("../../justsayno.de/crypto");

  request = require('request');

  module.exports = function(env) {
    var Guest, Mailuser, doesntHavePass, mustHaveHandle, _doAddDNSmailMap, _doCompleteUser, _doConfirmCode, _doEachDNSmap;
    Guest = env.db.model('Guest');
    Mailuser = env.db.model(mailuser);
    mustHaveHandle = function(req, res, next) {
      var _ref, _ref1, _ref2;
      if (!((_ref = req.session) != null ? (_ref1 = _ref.user) != null ? (_ref2 = _ref1.handle) != null ? _ref2.length : void 0 : void 0 : void 0)) {
        return res.redirect("/register");
      }
      return next();
    };
    doesntHavePass = function(req, res, next) {
      var _ref, _ref1, _ref2;
      if ((_ref = req.session) != null ? (_ref1 = _ref.user) != null ? (_ref2 = _ref1.pass) != null ? _ref2.length : void 0 : void 0 : void 0) {
        return res.redirect("/user/" + req.session.user.handle);
      }
      return next();
    };
    env.app.get('/registration', mustHaveHandle, doesntHavePass, function(req, res, next) {
      var temps;
      temps = [
        {
          selector: '#main',
          filename: 'registration.jade'
        }
      ];
      return env.respond(req, res, env.basetemps, temps, {
        handle: req.session.user.handle,
        emaildomain: env.emaildomain
      });
    });
    env.app.get('/deregister', mustHaveHandle, doesntHavePass, function(req, res, next) {
      return Guest.remove({
        handle: req.session.user.handle
      }, function(err, docs) {
        return res.send('/logout', 303);
      });
    });
    env.app.get('/register', doesntHavePass, function(req, res, next) {
      var temps, _ref, _ref1, _ref2;
      if ((_ref = req.session) != null ? (_ref1 = _ref.user) != null ? (_ref2 = _ref1.handle) != null ? _ref2.length : void 0 : void 0 : void 0) {
        return res.redirect("/registration");
      }
      temps = [
        {
          selector: '#main',
          filename: 'rego.jade'
        }
      ];
      return env.respond(req, res, env.basetemps, temps, {
        emaildomain: env.emaildomain
      });
    });
    env.app.get('/user/:handle', function(req, res, next) {
      var _ref, _ref1;
      if (((_ref = req.session) != null ? (_ref1 = _ref.user) != null ? _ref1.handle : void 0 : void 0) !== req.params.handle) {
        return res.redirect('/register');
      }
      return Mailuser.find({
        handle: req.session.user.handle
      }, function(err, docs) {
        var temps, _ref2;
        if (!err && (docs != null ? docs.length : void 0) === 1) {
          if (!docs[0].complete && ((_ref2 = docs[0].code) != null ? _ref2.length : void 0)) {
            res.redirect('/confirm');
          }
        }
        temps = [
          {
            selector: '#main',
            filename: 'user.jade'
          }
        ];
        return env.respond(req, res, env.basetemps, temps, {
          handle: req.params.handle,
          emaildomain: env.emaildomain
        });
      });
    });
    env.app.get('/confirm', mustHaveHandle, function(req, res, next) {
      console.log("finding " + req.session.user.handle);
      return Mailuser.find({
        handle: req.session.user.handle
      }, function(err, docs) {
        var temps, _ref;
        if (!err && (docs != null ? docs.length : void 0) === 1) {
          if (!docs[0].complete && ((_ref = docs[0].code) != null ? _ref.length : void 0)) {
            temps = [
              {
                selector: '#main',
                filename: 'confirm.jade'
              }
            ];
            return env.respond(req, res, env.basetemps, temps, {
              handle: docs[0].handle,
              email: docs[0].email,
              code: docs[0].code,
              emaildomain: env.emaildomain
            });
          }
        }
        return res.redirect("/user/" + req.session.user.handle);
      });
    });
    env.app.post('/confirm', function(req, res, next) {
      var i, subj, themail;
      subj = req.body.headers.subj;
      themail = req.body.headers.from;
      i = themail.indexOf('<');
      if (!(i < 0)) {
        themail = themail.substr(i + 1);
        if ((i = themail.indexOf('>')) > 0) {
          themail = themail.substr(0, i);
        }
      }
      return Guest.find({
        email: themail
      }, function(err, docs) {
        if (err || (docs != null ? docs.length : void 0) !== 1) {
          console.log("User not found on confirmation email:");
          console.dir(req.body.headers);
          return -1;
        }
        return _doConfirmCode(subj, docs[0], function(doc) {
          return _doAddDNSmailMap(doc, function(doc) {
            return _doCompleteUser(doc);
          });
        });
      });
    });
    _doEachDNSmap = function(doc, cb) {
      var connection, operation;
      operation = {
        host: "@",
        alias: doc.handle,
        destination: doc.email,
        active: "1"
      };
      connection = {
        url: env.DNSurl,
        auth: {
          user: env.DNSuser,
          pass: env.DNSpass
        }
      };
      return request.post(connection, operation, function(err, resp, body) {
        if (!err && resp.statusCode === 201) {
          return typeof cb === "function" ? cb() : void 0;
        }
        console.log("DNS API did not create new map");
        console.dir(connection);
        console.dir(operation);
        console.dir(err);
        return console.dir(resp);
      });
    };
    _doAddDNSmailMap = function(doc, cb) {
      return _doEachDNSmap(doc, function() {
        if (typeof cb === "function") {
          cb();
        }
        return Guest.findOne({
          code: null,
          complete: {
            $exists: false
          }
        }, function(err, doc) {
          if (err) {
            console.log("Error looking for incomplete users to map");
            return console.dir(err);
          }
          if (!doc) {
            return;
          }
          return _doAddDNSmailMap(doc);
        });
      });
    };
    _doConfirmCode = function(subj, doc, cb) {
      if (subj.indexOf(doc.code < 0)) {
        console.log("code '" + docs.code + "' not found in confirmation email subject:");
        console.dir(req.body.headers);
        return -1;
      }
      doc.code = null;
      return doc.save(function(err) {
        var msg;
        if (err) {
          msg = "ERROR completing guest record";
          console.log(err);
          console.dir(doc);
          return -1;
        }
        return typeof cb === "function" ? cb() : void 0;
      });
    };
    _doCompleteUser = function(doc) {
      if (doc.complete) {
        return;
      }
      doc.complete = true;
      return doc.save(function(err) {
        var msg;
        if (err) {
          msg = "ERROR completing guest record";
          console.log(err);
          return console.dir(doc);
        }
      });
    };
    env.app.post('/dorego', mustHaveHandle, function(req, res, next) {
      return Mailuser.find({
        email: req.body.email
      }, function(err, docs) {
        if (!err && (docs != null ? docs.length : void 0)) {
          return res.send("Email already used", 409);
        }
        return Guest.find({
          handle: req.session.user.handle
        }, function(err, docs) {
          var doc;
          if (err || (docs != null ? docs.length : void 0) !== 1) {
            return res.send("User not found", 404);
          }
          doc = docs[0];
          doc.email = req.body.email;
          doc.salt = crypto.generateSalt();
          doc.pass = crypto.hashPassword(req.body.pass, doc.salt);
          return doc.save(function(err) {
            var i, index, msg, u, verificationChars, verificationCode, _i;
            if (err) {
              msg = "ERROR updating guest record with password";
              console.log(msg);
              console.dir(doc);
              return res.send(msg, 404);
            }
            verificationCode = '';
            verificationChars = '0123456789abcdefghijklmnopqrstuvwxyz0123456789';
            for (i = _i = 0; _i <= 7; i = ++_i) {
              index = Math.floor(Math.random() * verificationChars.length);
              verificationCode += verificationChars.substring(index, index + 1);
            }
            u = new Mailuser({
              handle: req.session.user.handle,
              email: req.body.email,
              code: verificationCode
            });
            return u.save(function(err) {
              if (err) {
                msg = "ERROR writing new mailuser record ";
                console.log(msg);
                console.dir(u);
                return res.send(msg, 404);
              } else {
                return res.send('/confirm', 303);
              }
            });
          });
        });
      });
    });
    return env.app.post('/preregister', function(req, res, next) {
      var _ref, _ref1, _ref2;
      if ((_ref = req.session) != null ? (_ref1 = _ref.user) != null ? (_ref2 = _ref1.handle) != null ? _ref2.length : void 0 : void 0 : void 0) {
        return res.send("/user/" + req.session.user.handle, 303);
      }
      if (!req.body.handle.match(/^[a-z0-9_\.]+$/)) {
        return res.send('Not a valid email address', 409);
      }
      return Guest.find({
        handle: req.body.handle
      }, function(err, docs) {
        var g;
        if (err) {
          throw err;
        }
        if (docs != null ? docs.length : void 0) {
          return res.send('That user already exists', 409);
        }
        g = new Guest({
          handle: req.body.handle,
          verified: false
        });
        return g.save(function(err) {
          if (err) {
            console.log("ERROR adding new user " + g.handle);
            delete req.session.user;
            g = {};
          } else {
            req.session.user = _.clone(g);
            console.log("initiated new user " + g.handle);
          }
          return env.respond(req, res, g);
        });
      });
    });
  };

}).call(this);

//# sourceMappingURL=dmail_routes.map
