// Generated by CoffeeScript 1.6.2
(function() {
  var ObjectId, Schema, cheerio, fs, ft, looksLikeImage, mongoose, paginate, path, request, _;

  ft = require("../../justsayno.de/fieldtools");

  paginate = require("../paginate/paginate");

  cheerio = require("cheerio");

  request = require("request");

  fs = require("fs");

  path = require("path");

  mongoose = require("mongoose");

  Schema = mongoose.Schema;

  ObjectId = Schema.ObjectId;

  _ = require('underscore');

  /*
  moveImage = (from, to, count) ->
  	fs.stat to, (err, stats) ->
  		unless err
  			if count
  				to = to.substr(0, to.length - 1)	until to.charAt(to.length - 1) is "_"
  				to = to.substr(0, to.length - 1)
  			else
  				count = 1
  			to = to + "_" + count.toString()
  			count++
  			moveImage from, to, count
  		else
  			fs.rename from, to
  */


  looksLikeImage = function(u) {
    var lastfive, lastfour;

    lastfour = u.substr(u.length - 4).toLowerCase();
    lastfive = u.substr(u.length - 5).toLowerCase();
    return lastfour === ".jpg" || lastfour === ".gif" || lastfour === ".png" || lastfive === "jpeg";
  };

  module.exports = function(env) {
    var Story, Tag, doStories, paginConfig, storeImage, story, tag, taginConfig, tagsFromText;

    storeImage = function(image, cb) {
      var img_name, img_url, r, statictools, tmp_path, ws;

      statictools = require("../../justsayno.de/statictools")(env);
      if (!image.length) {
        return cb(null);
      }
      img_url = image;
      img_name = path.basename(img_url);
      tmp_path = "/tmp/" + img_name;
      ws = fs.createWriteStream(tmp_path);
      r = request(img_url);
      r.on("error", function() {
        return console.log("ERROR: reading: piping " + tmp_path);
      });
      ws.on("error", function() {
        return console.log("ERROR: writing: piping " + tmp_path);
      });
      r.on("end", function() {
        var staticpath, today;

        today = new Date();
        staticpath = "" + env.appname + "/images/" + (today.getFullYear()) + "/" + (today.getMonth() + 1);
        return statictools(tmp_path, staticpath, function(err, newname) {
          return cb(err, "" + staticpath + "/" + newname);
        });
      });
      return r.pipe(ws, {
        end: false
      });
    };
    doStories = function(req, res, docs, objs) {
      var temps, which_fields;

      _.each(docs, function(o) {
        o.link = "/" + (o.created_date.getDate()) + "/" + (o.created_date.getMonth() + 1) + "/" + (o.created_date.getFullYear()) + "/" + (encodeURIComponent(o.name));
        o.month = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][o.created_date.getMonth()];
        return o.day = o.created_date.getDate();
      });
      which_fields = [
        "title", "comment", "month", "day", {
          link: "link.href",
          image: "image.src",
          teaser: "teaser.textpre"
        }
      ];
      objs.eachstory = ft.translateFields(docs, which_fields);
      temps = [
        {
          selector: "#maintab",
          filename: "showall.jade"
        }
      ];
      return env.respond(req, res, env.basetemps, temps, objs);
    };
    story = require("./schema/story").name;
    Story = env.db.model(story);
    tag = require("./schema/tag").name;
    Tag = env.db.model(tag);
    taginConfig = {
      nakedRoute: "/tag/:tag",
      model: Story,
      query: {
        tags: "req.params.tag"
      },
      fields: "name title teaser comment image created_date",
      sort: "-created_date",
      limit: 5
    };
    paginate.setupPagLst(env, taginConfig, doStories);
    paginConfig = {
      nakedRoute: "/",
      skipRoute: "/roll/",
      model: Story,
      query: {},
      fields: "name title teaser comment image created_date",
      sort: "-created_date",
      limit: 5
    };
    paginate.setupPagLst(env, paginConfig, doStories);
    tagsFromText = function(textTags, cb, ids) {
      if (!textTags || !textTags.length) {
        return cb(ids);
      }
      tag = textTags.shift();
      return Tag.find({
        name: tag
      }, function(err, t) {
        if (!err && t && t.name === tag && t._id) {
          if (!ids) {
            ids = [];
          }
          ids.push(t._id);
          return tagsFromText(textTags, cb, ids);
        }
        return Tag.save({
          name: tag
        }, function(err, t) {
          if (!err && t && t.name === tag && t._id) {
            if (!ids) {
              ids = [];
            }
            ids.push(t._id);
          }
          return tagsFromText(textTags, cb, ids);
        });
      });
    };
    env.app.get("/tags", function(req, res, next) {
      return Tag.find({}, function(err, tags) {
        return env.respond(req, res, null, null, _.pluck(tags, 'name'));
      });
    });
    env.app.post("/blog", function(req, res, next) {
      var i, protocol, s, today;

      protocol = "http://";
      s = {
        comment: req.body.comment
      };
      today = new Date();
      s.created_date = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      s.modified_date = s.created_date;
      if (!(req.body.url && req.body.url.length)) {
        return res.send("no post", 404);
      }
      if (looksLikeImage(req.body.url)) {
        s.image = req.body.url;
      } else {
        s.url = req.body.url;
        s.title = req.body.title;
        s.image = req.body.image;
        s.teaser = req.body.description;
      }
      s.name = decodeURIComponent(req.body.url);
      while ((i = s.name.indexOf("/")) >= 0) {
        s.name = s.name.substr(i + 1);
      }
      while ((i = s.name.indexOf(".")) >= 0) {
        s.name = s.name.substr(0, i);
      }
      return storeImage(s.image, function(err, newimage) {
        var base, u;

        if (!err && newimage) {
          s.image = newimage;
        }
        if (s.image && s.image.length) {
          s.image = "" + protocol + env.staticurl + "/" + newimage;
        }
        u = decodeURIComponent(req.body.url);
        if (u.substr(0, 7) !== protocol) {
          u = protocol + u;
        }
        base = u.substr(0, u.substr(7).indexOf("/") + 7);
        return request(u, function(err, resp, bod) {
          if (!err && resp.statusCode === 200) {
            s.body = bod;
            return tagsFromText(req.body.tags, function(ids) {
              s.tags = ids;
              return new Story(s).save(function(err, savedsig) {
                if (err) {
                  throw err;
                }
                return res.send("ok", 200);
              });
            });
          } else {
            return res.send("bad fetch", 404);
          }
        });
      });
    });
    env.app.get("/consider/:url", function(req, res, next) {
      var base, protocol, u;

      protocol = "http://";
      u = decodeURIComponent(req.params.url);
      if (u.substr(0, 7) !== protocol) {
        u = "" + protocol + u;
      }
      base = u.substr(0, u.substr(7).indexOf("/") + 7);
      return request(u, function(err, resp, bod) {
        var $, $w, payload, w;

        if (!err && resp.statusCode === 200) {
          $ = cheerio.load(bod);
          payload = {
            title: $("title").text()
          };
          $("meta").each(function() {
            switch ($(this).attr("property")) {
              case "og:title":
                return payload.title = $(this).attr("content");
              case "og:description":
                return payload.description = $(this).attr("content");
              case "og:image":
                return payload.image = $(this).attr("content");
            }
          });
          if (!payload.description) {
            $("body").find("p").each(function() {
              if (!payload.description ? $(this).find("strong").length : void 0) {
                return payload.description = $(this).text();
              }
            });
          }
          if (!payload.description) {
            $("body").find("p").each(function() {
              if (!payload.description ? $(this).text().length : void 0) {
                return payload.description = $(this).text();
              }
            });
          }
          if (!(payload.description && payload.description.length)) {
            payload.description = "...";
          }
          if (!payload.image) {
            w = 50;
            $w = void 0;
            $("body").find("img").each(function() {
              var neww;

              neww = $(this).attr("width");
              if (neww) {
                neww = parseInt(neww, 10);
                if (neww > w) {
                  w = neww;
                  return $w = $(this);
                }
              }
            });
            if ($w) {
              payload.image = $w.attr("src");
            }
          }
          if (!payload.image) {
            $("body").find("img").each(function() {
              if (!payload.image ? $(this).attr("alt") : void 0) {
                return payload.image = $(this).attr("src");
              }
            });
          }
          if (!(payload.image ? payload.image.substr(0, 7) === protocol : void 0)) {
            payload.image = base + payload.image;
          }
          return env.respond(req, res, null, null, [payload]);
        } else {
          return res.send("Bad Fetch", 404);
        }
      });
    });
    return env.app.get("/:date/:month/:year/:name", function(req, res, next) {
      var next_date, search_date, which_fields;

      search_date = new Date(req.params.year, req.params.month - 1, req.params.date);
      next_date = new Date(search_date);
      next_date.setDate(search_date.getDate() + 1);
      which_fields = [
        "title", "comment", "tags", {
          image: "image.src",
          url: "url.href",
          teaser: "teaser.textpre"
        }
      ];
      return Story.findOne({
        created_date: {
          $gte: search_date,
          $lt: next_date
        },
        name: req.params.name
      }, ft.toStr(which_fields), function(err, doc) {
        var pathname, temps;

        if (!(err || !doc)) {
          temps = [
            {
              selector: "#maintab",
              filename: "showstory.jade"
            }
          ];
          pathname = "" + req.params.date + " " + req.params.month + " " + req.params.year + " " + req.params.name;
          return env.hook["comments"](pathname, function(err, c) {
            var all_objs;

            if (err) {
              c = 0;
            }
            all_objs = {
              story: ft.translateFields(doc, which_fields)[0]
            };
            all_objs.commentcnt = c;
            if (!all_objs.story.tags || !all_objs.story.tags.length) {
              return env.respond(req, res, env.basetemps, temps, all_objs);
            } else {
              return Tag.find({
                id: {
                  $in: _.map(all_objs.story.tags, function(t) {
                    return ObjectId(t);
                  })
                }
              }, function(err, tags) {
                if (!(err || !tags)) {
                  _.each(tags, function(t) {
                    return t.link = '/tag/' + t._id;
                  });
                  all_objs.story.tags = ft.translateFields(tags, {
                    name: 'tags',
                    link: 'tags.href'
                  });
                  return env.respond(req, res, env.basetemps, temps, all_objs);
                }
              });
            }
          });
        }
      });
    });
  };

}).call(this);

/*
//@ sourceMappingURL=wblg.map
*/
